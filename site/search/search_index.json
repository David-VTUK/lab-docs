{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lab Docs Greetings, traveler! Before you lies the realm of my homelab, a land where retired PCs are reborn as mighty servers, where Raspberry Pi devices plot to take over the world (starting with my living room), and where Wi-Fi signals are as fiercely guarded as dragon eggs. Here, the cables might be tangled, but our spirits are forever entwined with the joy of tinkering! In this enchanted land, every LED blink tells a story, every beep sings a ballad, and every 404 error... well, let's just say we're still working on that spell. But fret not! For though this kingdom might seem complex, with the scrolls (err... pages) that follow, you shall unravel its mysteries. So, polish your glasses, grab a potion (or coffee), and prepare to embark on a journey through the corridors of the most magical (and occasionally maddening) kingdom of all: My Homelab. Prepare to be amused, enlightened, and perhaps even a bit befuddled. After all, in the world of homelabs, anything is possible!","title":"Home"},{"location":"#lab-docs","text":"Greetings, traveler! Before you lies the realm of my homelab, a land where retired PCs are reborn as mighty servers, where Raspberry Pi devices plot to take over the world (starting with my living room), and where Wi-Fi signals are as fiercely guarded as dragon eggs. Here, the cables might be tangled, but our spirits are forever entwined with the joy of tinkering! In this enchanted land, every LED blink tells a story, every beep sings a ballad, and every 404 error... well, let's just say we're still working on that spell. But fret not! For though this kingdom might seem complex, with the scrolls (err... pages) that follow, you shall unravel its mysteries. So, polish your glasses, grab a potion (or coffee), and prepare to embark on a journey through the corridors of the most magical (and occasionally maddening) kingdom of all: My Homelab. Prepare to be amused, enlightened, and perhaps even a bit befuddled. After all, in the world of homelabs, anything is possible!","title":"Lab Docs"},{"location":"Lab-Config/lab-config/","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Lab config"},{"location":"prometheus/part-five/","text":"Recording Rules CPU's per node: apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-cpu-count-recording-rule namespace: prom-stack spec: groups: - name: node-cpu-count-group rules: - record: lab_node:total_cpu_count expr: count without(cpu, mode) (node_cpu_seconds_total{mode=\"idle\", cluster=\"workload-cluster\"}) apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-total-mem-gb namespace: prom-stack spec: groups: - name: node-total-mem-gb rules: - record: lab_node:total_memory_gb expr: (node_memory_MemTotal_bytes{cluster=\"workload-cluster\"} / 1024^3) apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-mem-per-cpu namespace: prom-stack spec: groups: - name: node-mem-per-cpu rules: - record: lab_node:mem_per_cpu_bytes expr: node_memory_Percpu_bytes{cluster=\"workload-cluster\"} Visualising with Grafana Example of basic graphs leveraging the above recording rules:","title":"Part Five - Visualising with Grafana"},{"location":"prometheus/part-five/#recording-rules","text":"","title":"Recording Rules"},{"location":"prometheus/part-five/#cpus-per-node","text":"apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-cpu-count-recording-rule namespace: prom-stack spec: groups: - name: node-cpu-count-group rules: - record: lab_node:total_cpu_count expr: count without(cpu, mode) (node_cpu_seconds_total{mode=\"idle\", cluster=\"workload-cluster\"}) apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-total-mem-gb namespace: prom-stack spec: groups: - name: node-total-mem-gb rules: - record: lab_node:total_memory_gb expr: (node_memory_MemTotal_bytes{cluster=\"workload-cluster\"} / 1024^3) apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: node-mem-per-cpu namespace: prom-stack spec: groups: - name: node-mem-per-cpu rules: - record: lab_node:mem_per_cpu_bytes expr: node_memory_Percpu_bytes{cluster=\"workload-cluster\"}","title":"CPU's per node:"},{"location":"prometheus/part-five/#visualising-with-grafana","text":"Example of basic graphs leveraging the above recording rules:","title":"Visualising with Grafana"},{"location":"prometheus/part-four/","text":"Scrape Configuration Using the Prometheus Operator, ServiceMonitor and PodMonitor are standard abstractions for service discovery within a Kubernetes cluster. However, in this example we are scraping metrics directly exposed from nodes from an external cluster. Two ways to approach this include: Modifying the Prometheus yaml file and directly injecting additional scrape configs Modifying the Prometheus yaml file and reference an existing secret with additionalScrapeConfigs For this example, the latter is used as a provides a less error-prone and scalable way to manage additional scrape configurations Additional Scrape config This scrape configuration references the three nodes in the Workload cluster. In addition, a label is automatically created that identifies the cluster these nodes reside in. This is helpful to distinguish these metrics from other nodes that may be scraped for similar metrics in the future. - job_name: 'workload-cluster-nodes' static_configs: - targets: - '172.16.30.79:9100' - '172.16.30.80:9100' - '172.16.30.78:9100' labels: cluster: 'workload-cluster' Create Secret kubectl create secret generic additional-scrape-configs --from-file=node-exporter-scrape.yaml --dry-run=client -oyaml > additional-scrape-configs.yaml Modify Prometheus Instance with additionalScrapeConfigs To include this scrape configuration we need to modify the corresponding Prometheus object apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata: labels: app: kube-prometheus-stack-prometheus app.kubernetes.io/instance: prom-stack-lab app.kubernetes.io/managed-by: Helm app.kubernetes.io/part-of: kube-prometheus-stack app.kubernetes.io/version: 51.0.2 chart: kube-prometheus-stack-51.0.2 heritage: Helm release: prom-stack-lab name: prom-stack-lab-kube-promet-prometheus namespace: prom-stack spec: additionalScrapeConfigs: key: node-exporter-scrape.yaml name: additional-scrape-configs We can visualise this configuration with the following: Validate Scrape Config From the Prometheus UI, we can validate the scrape configuration is configured and working as expected: From the Prometheus UI, we can validate metrics have been scraped with a simple PromQL query: Test Scrape Config","title":"Part Four - Scrape Configuration"},{"location":"prometheus/part-four/#scrape-configuration","text":"Using the Prometheus Operator, ServiceMonitor and PodMonitor are standard abstractions for service discovery within a Kubernetes cluster. However, in this example we are scraping metrics directly exposed from nodes from an external cluster. Two ways to approach this include: Modifying the Prometheus yaml file and directly injecting additional scrape configs Modifying the Prometheus yaml file and reference an existing secret with additionalScrapeConfigs For this example, the latter is used as a provides a less error-prone and scalable way to manage additional scrape configurations","title":"Scrape Configuration"},{"location":"prometheus/part-four/#additional-scrape-config","text":"This scrape configuration references the three nodes in the Workload cluster. In addition, a label is automatically created that identifies the cluster these nodes reside in. This is helpful to distinguish these metrics from other nodes that may be scraped for similar metrics in the future. - job_name: 'workload-cluster-nodes' static_configs: - targets: - '172.16.30.79:9100' - '172.16.30.80:9100' - '172.16.30.78:9100' labels: cluster: 'workload-cluster'","title":"Additional Scrape config"},{"location":"prometheus/part-four/#create-secret","text":"kubectl create secret generic additional-scrape-configs --from-file=node-exporter-scrape.yaml --dry-run=client -oyaml > additional-scrape-configs.yaml","title":"Create Secret"},{"location":"prometheus/part-four/#modify-prometheus-instance-with-additionalscrapeconfigs","text":"To include this scrape configuration we need to modify the corresponding Prometheus object apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata: labels: app: kube-prometheus-stack-prometheus app.kubernetes.io/instance: prom-stack-lab app.kubernetes.io/managed-by: Helm app.kubernetes.io/part-of: kube-prometheus-stack app.kubernetes.io/version: 51.0.2 chart: kube-prometheus-stack-51.0.2 heritage: Helm release: prom-stack-lab name: prom-stack-lab-kube-promet-prometheus namespace: prom-stack spec: additionalScrapeConfigs: key: node-exporter-scrape.yaml name: additional-scrape-configs We can visualise this configuration with the following:","title":"Modify Prometheus Instance with additionalScrapeConfigs"},{"location":"prometheus/part-four/#validate-scrape-config","text":"From the Prometheus UI, we can validate the scrape configuration is configured and working as expected: From the Prometheus UI, we can validate metrics have been scraped with a simple PromQL query:","title":"Validate Scrape Config"},{"location":"prometheus/part-four/#test-scrape-config","text":"","title":"Test Scrape Config"},{"location":"prometheus/part-one/","text":"High Level Design Two clusters will be leveragged for this lab A dedicated Kubernetes cluster for the kube-prometheus stack. A Kubernetes cluster with nodes running node-exporter which the monitoring cluster will scrape. Workload Cluster The workload cluster is used to host end-user applications. Each worker node will have node-exporter installed for the purpose of exposing metrics Three nodes comprise the cluster, each hosting etcd , control plane and worker roles Node 1 Node 2 Node 2 OS Ubuntu 22.04 Ubuntu 22.04 Ubuntu 22.04 CPU 2 2 2 Memory (GB) 6 6 6 Disk (GB) 80 80 80 Kubernetes Version: 1.26 Monitoring Cluster The monitoring cluster is used to host the kube-prometheus stack. kube-prometheus leverages the Prometheus Operator. A specific scrape configuration will be used to scrape for external node-exporter metrics. Node 1 Node 2 Node 2 OS Ubuntu 22.04 Ubuntu 22.04 Ubuntu 22.04 CPU 2 2 2 Memory (GB) 8 8 8 Disk (GB) 80 80 80 Kubernetes Version: 1.26 Note Kube-Prometheus maintains a compatibility matrix and should be checked prior to any installation","title":"Part One - Design"},{"location":"prometheus/part-one/#high-level-design","text":"Two clusters will be leveragged for this lab A dedicated Kubernetes cluster for the kube-prometheus stack. A Kubernetes cluster with nodes running node-exporter which the monitoring cluster will scrape.","title":"High Level Design"},{"location":"prometheus/part-one/#workload-cluster","text":"The workload cluster is used to host end-user applications. Each worker node will have node-exporter installed for the purpose of exposing metrics Three nodes comprise the cluster, each hosting etcd , control plane and worker roles Node 1 Node 2 Node 2 OS Ubuntu 22.04 Ubuntu 22.04 Ubuntu 22.04 CPU 2 2 2 Memory (GB) 6 6 6 Disk (GB) 80 80 80 Kubernetes Version: 1.26","title":"Workload Cluster"},{"location":"prometheus/part-one/#monitoring-cluster","text":"The monitoring cluster is used to host the kube-prometheus stack. kube-prometheus leverages the Prometheus Operator. A specific scrape configuration will be used to scrape for external node-exporter metrics. Node 1 Node 2 Node 2 OS Ubuntu 22.04 Ubuntu 22.04 Ubuntu 22.04 CPU 2 2 2 Memory (GB) 8 8 8 Disk (GB) 80 80 80 Kubernetes Version: 1.26 Note Kube-Prometheus maintains a compatibility matrix and should be checked prior to any installation","title":"Monitoring Cluster"},{"location":"prometheus/part-three/","text":"Node-Exporter Install Prerequisites helm CLI kubectl CLI kubeconfig file for the monitoring cluster 1. Add Helm Chart Repo helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update 2. Prepare values.yaml For this install, each node will expose the node-exporter metrics endpoint as a nodeport service type. service: enabled: true type: NodePort port: 9100 targetPort: 9100 nodePort: portName: metrics 3. Install Chart Install node-exporter leveraging the customisations specified in the previous step. helm install prom-stack-node-exporter prometheus-community/prometheus-node-exporter \\ --namespace prom-stack \\ --create-namespace \\ -f values.yaml","title":"Part Three - Node-Exporter Install"},{"location":"prometheus/part-three/#node-exporter-install","text":"","title":"Node-Exporter Install"},{"location":"prometheus/part-three/#prerequisites","text":"helm CLI kubectl CLI kubeconfig file for the monitoring cluster","title":"Prerequisites"},{"location":"prometheus/part-three/#1-add-helm-chart-repo","text":"helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update","title":"1. Add Helm Chart Repo"},{"location":"prometheus/part-three/#2-prepare-valuesyaml","text":"For this install, each node will expose the node-exporter metrics endpoint as a nodeport service type. service: enabled: true type: NodePort port: 9100 targetPort: 9100 nodePort: portName: metrics","title":"2. Prepare values.yaml"},{"location":"prometheus/part-three/#3-install-chart","text":"Install node-exporter leveraging the customisations specified in the previous step. helm install prom-stack-node-exporter prometheus-community/prometheus-node-exporter \\ --namespace prom-stack \\ --create-namespace \\ -f values.yaml","title":"3. Install Chart"},{"location":"prometheus/part-two/","text":"Kube-prometheus Stack Install Prerequisites helm CLI kubectl CLI kubeconfig file for the monitoring cluster 1. Add Helm Chart Repo helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update 2. Prepare values.yaml alertmanager: ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - alertmanager-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - alertmanager-lab.virtualthoughts.co.uk secretName: alertmanager-lab-tls pathType: Prefix prometheus: prometheusSpec: storageSpec: volumeClaimTemplate: spec: accessModes: - ReadWriteOnce resources: requests: storage: 50Gi selector: volumeMode: Filesystem ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - prometheus-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - prometheus-lab.virtualthoughts.co.uk secretName: prometheus-lab-tls pathType: Prefix grafana: ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - grafana-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - grafana-lab.virtualthoughts.co.uk secretName: grafana-lab-tls pathType: Prefix persistence: size: 5Gi subPath: null type: statefulset enabled: true Note The values.yaml file provides a number of customisations. Namely leveraging cert-manager for TLS certificate management, exposing Prometheus, Grafana and Alertmanager via Ingress, and enabling persistent storage. 3. Install Chart helm install prom-stack-lab prometheus-community/kube-prometheus-stack \\ --namespace prom-stack \\ --create-namespace \\ -f values.yaml","title":"Part Two - Kube-Prometheus-Stack Install"},{"location":"prometheus/part-two/#kube-prometheus-stack-install","text":"","title":"Kube-prometheus Stack Install"},{"location":"prometheus/part-two/#prerequisites","text":"helm CLI kubectl CLI kubeconfig file for the monitoring cluster","title":"Prerequisites"},{"location":"prometheus/part-two/#1-add-helm-chart-repo","text":"helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update","title":"1. Add Helm Chart Repo"},{"location":"prometheus/part-two/#2-prepare-valuesyaml","text":"alertmanager: ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - alertmanager-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - alertmanager-lab.virtualthoughts.co.uk secretName: alertmanager-lab-tls pathType: Prefix prometheus: prometheusSpec: storageSpec: volumeClaimTemplate: spec: accessModes: - ReadWriteOnce resources: requests: storage: 50Gi selector: volumeMode: Filesystem ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - prometheus-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - prometheus-lab.virtualthoughts.co.uk secretName: prometheus-lab-tls pathType: Prefix grafana: ingress: annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/rewrite-target: / cert-manager.io/cluster-issuer: letsencrypt-production enabled: true hosts: - grafana-lab.virtualthoughts.co.uk paths: - / tls: - hosts: - grafana-lab.virtualthoughts.co.uk secretName: grafana-lab-tls pathType: Prefix persistence: size: 5Gi subPath: null type: statefulset enabled: true Note The values.yaml file provides a number of customisations. Namely leveraging cert-manager for TLS certificate management, exposing Prometheus, Grafana and Alertmanager via Ingress, and enabling persistent storage.","title":"2. Prepare values.yaml"},{"location":"prometheus/part-two/#3-install-chart","text":"helm install prom-stack-lab prometheus-community/kube-prometheus-stack \\ --namespace prom-stack \\ --create-namespace \\ -f values.yaml","title":"3. Install Chart"},{"location":"prometheus/prom/","text":"Prometheus Lab Setup Part 1 Part 2","title":"Prometheus Lab Setup"},{"location":"prometheus/prom/#prometheus-lab-setup","text":"","title":"Prometheus Lab Setup"},{"location":"prometheus/prom/#part-1","text":"","title":"Part 1"},{"location":"prometheus/prom/#part-2","text":"","title":"Part 2"}]}